OK, I need an overview of the entire project.

I've been away from it and parts of it just don't make sense any more. So I'm
going to figure it out again and hopefully impove the design a bit at the same
time.

Here is a describtion of each part of the program. As well as the modules that
implement each one. Note that they are not always completely seperate, they
may interlock or cut across each other.


Main Loop: main, loop-clock
  The main function orginizes the five man stages and allocates most of the
memory used throughout the program. LoopClock is just a class that controls
how fast the loop spins on by, a frame rate limiter.
  Loop goes like this: setup > [ input > update > render ] > cleanup. Of these
sections update & render are almost completely outsourced to other parts of
the program. Similarly setup and cleanup are simply prepare and close down
other classes and parts of the program.


Input (events): main, event-pass, event-queue, player-event
  Input is gathered as part of the main loop, it is partially sorted here in
that the types of input we don't care about are stripped off and things that
control the main exicution of the game are handled in place.
  The rest goes to event-pass which sorts out the remaining input and passes
it to the correct target. It also has the loop-up for keys to inputs for
re-binding controls.
  The EventQueue holds onto events until something that can handle them comes
along, currently there is a single instance for the PlayerEvents, which the
player mob handles.

CHANGES: input-handler, input-event
  First, it is too spead out, the logic of what input does is spead over three
layers (main, event-pass and whatever scans the event-queue). To make it worse
they don't have distinct roles. I think I can get it to 2.
  InputEvent is just data. Does nothing other than know what it is.
  InputHandler on the other hand takes the events from window.pollEvent and
translates them into InputEvents. This includes control settings and some bits
of game state. (None of which are in the game yet.) These events are then
handled in the event loop. This first layer handles things that effect the
larger game state.
  Then there is a buffer, that holds any input that does not require an
imediate responce (probably a queue) until update happens. The second layer
is everything that happens there.


Update: mob-collect, mob, part-ai (+subclasses: player-ai)
  Update the game state taking into account the change in time and any new
inputs. This is accomplished through MobCollect::update which calls all the
Mob::update functions which do all the standard steps as well as calling the
mob's part-ai for and special stuff.
  Mob is a collection of parts (although currently only one, part-ai, exists)
although it is not an hollow container as I expect mobs to be seeing very
little veration.


Render: map, tile, mob-collect, mob, image-def, image-lib
  Or just the output stage, as the visual rendering is the only output in the
game so far. This is handled by every visual thing in the game being a
sf::Drawable class, as are there containers which draw all of them.
  The image-def and image-lib contain tools for the actual loading of images.
Mobs and Tiles each have there own set of rules by which their images are
created, stored and drawn and these implement them.


Physics: physics-*, contact, part-ai
  All classes with physics in their name are connected directly to the
physics engine. The physics engine is quite simple, Mobs move and are
rectangles, tiles stay in place (and may be more exotic eventally). Mobs
and Tiles bump into each other, but Mobs don't touch other mobs. Eventally
things like progectiles or some area of interaction should be added so
Mobs/the player have some influence over the world around them.
  Most of the physics engine is dedicated to simple kniamatics, jumping with
arks, speeding up and slowing down and so on, and collition detection, mob
with tile not even the other way around. Those things in the game that
interact with the physics engine have a physics component class that the
related data is stored in.
  Contact is a subsection of the PhysicsMob that is supposed to track if the
mob is touching anything. PartAI has some wrapper functions for PhysicsMob,
so the ai can move the Mob.
  PhysicsMap is a sort of getter for PhysicsTiles and it adds in a null result
that is returned when we go out of range. The physics of the void beyond the
edge of the map.

CHANGES: physics, physics-mob
  OK, the main Physics class has to be cleaned up a lot. It will probably
remain a stateless shell (if I gave it state it might be the frame rate) with
all the math contained within it.
  The trick is I want to (almost never) access it directly. Its interface will
be hidden in other classes, like the PhysicsMob. I am considering converting
the PhysicsMob from a data structure to a more ecapsulated object. The PartAI
will call methods that make changes, without having to worry about the
mechanics of how these happen.
  PartAI gives its children access to Mob's PhysicsMob (by the friend link).
This means having simple operations that can be used on the surface of the
PhysicsMob will make implementing PartAI subclasses easier.

Acceleration: accel-request, physics-mob
  A sub-system has evolved around smooth acceleration. It event has its own
class, AccelRequest which is just some data and the calculation that turns
that data into accerations. It can be made anywhere but the proccessing
should generally only be called through the accel* functions in the
PhysicsMob, where direction and setting is handled.


Map System: map, grid, ~ super-grid, tile, physics-map, physics-tile
  There is a map which is a grip (2d container I made) of Tiles. The Map does
most of the handling for Tiles. The Map distributes draw commands and is also
passed around instead of the Tiles themeselves most of the time.
  The Tiles themselves are (currently) just an image tied to a physics-tile,
which contains all of the information needed  to determain colitions with
Tiles. Actually it does't contain location information, but are instead
reteved by location.

CHANGES:
  If I bring back super-grid I should probably make it and sub-grid children
of grid, so they all have the same interface.
  The interactions between map, grid, tile & physic-map are a little bit messy
and should probably be cleaned up.


Mob System: mob, mob-collect, part-ai, physics-mob
  Mobs are your generic moving thing on the map. Although they aren't actually
very generic in some respects. Their phyiscal size for one is locked until
a more general.
  The orginization system for mobs is quite simple, all mobs go in the
MobCollect which distributes update and draw commands to them. It is also
a bit of a factory for the Mobs, although creating them is really simple.
  Mobs are seperated by an enumeration called MobID, which is used select
the image and the components (currently just the PartAI).

CHANGES:
  Some way to send messages to particular Mobs might be nice.
  However the main thing that needs work is the interaction between mobs and
the Physics call. PhysicsMob is really that intersection but still more needs
to be done in and around that point. Particularly it has to be really easy to
make Mobs move around from inside PartIA::update.
